package wallets

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"log"

	"github.com/ethereum/go-ethereum/common"
	"golang.org/x/crypto/sha3"
)

type Wallet struct {
	PrivateKey *ecdsa.PrivateKey
	Address    common.Address
}

func CreateWallet() *Wallet {
	// -------------------------------------
	// 1. Gerar uma chave privada (256 bits)
	// -------------------------------------

	// Uma chave privada √© apenas um n√∫mero inteiro de 256 bits (32 bytes)
	// Cada byte √© uma sequ√™ncia de 8 bits (valores de 0 a 255)
	privateKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	if err != nil {
		log.Fatal(err)
	}

	// NOTA: Ethereum usa a curva SECP256k1, mas aqui usamos P256 apenas como exemplo
	// Em produ√ß√£o, voc√™ precisaria usar SECP256k1 (exige biblioteca externa ou implementa√ß√£o manual)

	// Convertendo a chave privada para hexadecimal para facilitar visualiza√ß√£o
	privateKeyBytes := privateKey.D.Bytes() // D √© o valor inteiro da chave privada
	privateKeyHex := hex.EncodeToString(privateKeyBytes)
	fmt.Println("üîê Private Key:", privateKeyHex)

	// -------------------------------------
	// 2. Gerar a chave p√∫blica (X, Y)
	// -------------------------------------

	// A chave p√∫blica no ECDSA √© um ponto (X, Y) na curva el√≠ptica
	// A curva SECP256k1 √© uma curva el√≠ptica definida por uma equa√ß√£o matem√°tica
	publicKeyX := privateKey.PublicKey.X.Bytes()
	publicKeyY := privateKey.PublicKey.Y.Bytes()

	// Concatenamos X e Y para formar a chave p√∫blica completa
	// A chave p√∫blica n√£o √© criptografada, mas √© derivada de forma unidirecional da chave privada
	publicKeyBytes := append(publicKeyX, publicKeyY...)
	publicKeyHex := hex.EncodeToString(publicKeyBytes)
	fmt.Println("üîì Public Key (uncompressed):", publicKeyHex)

	// -------------------------------------
	// 3. Gerar o endere√ßo Ethereum (Keccak256)
	// -------------------------------------

	// O endere√ßo Ethereum √© os √∫ltimos 20 bytes do hash Keccak256 da chave p√∫blica
	// Keccak256 √© uma fun√ß√£o de hash semelhante ao SHA3, mas com padding diferente
	// Ela pega uma entrada (bytes) e gera um "resumo" √∫nico de 32 bytes (256 bits)
	hash := sha3.NewLegacyKeccak256() // Usamos a vers√£o legacy do Keccak256 usada pelo Ethereum
	hash.Write(publicKeyBytes)        // Geramos o hash da chave p√∫blica
	hashed := hash.Sum(nil)           // nil significa que n√£o temos bytes extras para adicionar

	// O endere√ßo Ethereum √© os √∫ltimos 20 bytes do hash
	address := hashed[12:] // Pegamos os 20 √∫ltimos bytes (160 bits)
	addressHex := hex.EncodeToString(address)
	fmt.Println("üè† Ethereum Address: 0x" + addressHex)

	return &Wallet{
		PrivateKey: privateKey,
		Address:    common.HexToAddress("0x" + addressHex), // Convert
	}
}
